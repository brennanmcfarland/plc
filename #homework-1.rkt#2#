#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 31 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 59 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 255 255 12 12 12 -1 -1
2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 104 104 246 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 104 104 246 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 235 255 102 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 235 255 102 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1
          0 708 0 18 3 19 #"; Brennan McFarland"
0 0 26 29 1 #"\n"
0 0 18 3 14 #"; Jan 31, 2018"
0 0 26 29 1 #"\n"
0 0 18 3 12 #"; Homework 1"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 86
(
 #"; given a number and a list of numbers in order, insert the number i"
 #"n its proper place"
) 0 0 26 29 1 #"\n"
0 0 18 3 76
(
 #";TODO: what about a zero length list?  should it return empty or the"
 #" number?"
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 6 #"insert"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"num"
0 0 26 3 1 #" "
0 0 14 3 3 #"lis"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 3 #"lis"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 26 3 3 #"())"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 1 #">"
0 0 26 3 1 #" "
0 0 14 3 3 #"num"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"lis"
0 0 26 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"lis"
0 0 26 3 3 #") ("
0 0 14 3 6 #"insert"
0 0 26 3 1 #" "
0 0 14 3 3 #"num"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 3 #"lis"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 14 3 3 #"num"
0 0 26 3 1 #" "
0 0 14 3 3 #"lis"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      )"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    )"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  )"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 99
(
 #"; given two lists of numbers that in order, return the combination o"
 #"f both lists in order as a list"
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 5 #"merge"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 4 #"lis1"
0 0 26 3 1 #" "
0 0 14 3 4 #"lis2"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 4 #"lis1"
0 0 26 3 2 #") "
0 0 14 3 4 #"lis2"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 4 #"lis2"
0 0 26 3 2 #") "
0 0 14 3 4 #"lis1"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 1 #"<"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 4 #"lis1"
0 0 26 3 3 #") ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 4 #"lis2"
0 0 26 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 4 #"lis1"
0 0 26 3 3 #") ("
0 0 14 3 5 #"merge"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 4 #"lis1"
0 0 26 3 2 #") "
0 0 14 3 4 #"lis2"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 4 #"lis2"
0 0 26 3 3 #") ("
0 0 14 3 5 #"merge"
0 0 26 3 1 #" "
0 0 14 3 4 #"lis1"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 4 #"lis2"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      )"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    )"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  )"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 98
(
 #"; given a list of atoms, remove any atom that is a repeat of the ato"
 #"m that immediately precedes it"
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 10 #"removedups"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"lat"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 3 #"lat"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 26 3 3 #"())"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 3 #"lat"
0 0 26 3 3 #")) "
0 0 14 3 3 #"lat"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 6 #"equal?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"lat"
0 0 26 3 3 #") ("
0 0 14 3 3 #"car"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 3 #"lat"
0 0 26 3 5 #"))) ("
0 0 14 3 10 #"removedups"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 3 #"lat"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"lat"
0 0 26 3 3 #") ("
0 0 14 3 10 #"removedups"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 3 #"lat"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      )"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    )"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  )"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 72
(
 #"; given a list of atoms, return a list that contains two lists of at"
 #"oms:"
) 0 0 26 29 1 #"\n"
0 0 18 3 61
#"; the first list contains odd-indexed atoms (starting from 1)"
0 0 26 29 1 #"\n"
0 0 18 3 67
#"; the second list contains the even-indexed atoms (starting from 1)"
0 0 26 29 1 #"\n"
0 0 18 3 35 #";TODO: not done, doesn't work right"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 5 #"split"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"lat"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 3 #"lat"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 26 3 3 #"())"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 3 #"lat"
0 0 26 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"lat"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 26 3 4 #"()))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 3 #"lat"
0 0 26 3 5 #"))) ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 5 #"split"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"lat"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 26 3 6 #"())) ("
0 0 14 3 5 #"split"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 3 #"lat"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 26 3 6 #"()))))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 2 #" ("
0 0 14 3 5 #"split"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 3 #"lat"
0 0 26 3 5 #"))) ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 2 #" ("
0 0 14 3 5 #"split"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 3 #"lat"
0 0 26 3 5 #"))) ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"lat"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 18 3 3 #";(("
0 0 18 3 5 #"null?"
0 0 18 3 2 #" ("
0 0 18 3 3 #"car"
0 0 18 3 2 #" ("
0 0 18 3 3 #"car"
0 0 18 3 1 #" "
0 0 18 3 3 #"lat"
0 0 18 3 5 #"))) ("
0 0 18 3 4 #"cons"
0 0 18 3 1 #" "
0 0 18 3 4 #"'() "
0 0 18 3 6 #"'())) "
0 0 18 3 25 #";this isn't right, fix it"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 18 3 2 #";("
0 0 18 3 4 #"else"
0 0 18 3 2 #" ("
0 0 18 3 4 #"cons"
0 0 18 3 2 #" ("
0 0 18 3 6 #"cons ("
0 0 18 3 3 #"car"
0 0 18 3 1 #" "
0 0 18 3 3 #"lat"
0 0 18 3 3 #") ("
0 0 18 3 5 #"split"
0 0 18 3 2 #" ("
0 0 18 3 3 #"cdr"
0 0 18 3 1 #" "
0 0 18 3 3 #"lat"
0 0 18 3 5 #"))) ("
0 0 18 3 4 #"cons"
0 0 18 3 2 #" ("
0 0 18 3 3 #"car"
0 0 18 3 2 #" ("
0 0 18 3 4 #"cdr "
0 0 18 3 3 #"lat"
0 0 18 3 4 #")) ("
0 0 18 3 5 #"split"
0 0 18 3 2 #" ("
0 0 18 3 3 #"cdr"
0 0 18 3 2 #" ("
0 0 18 3 3 #"cdr"
0 0 18 3 1 #" "
0 0 18 3 9 #"lat))))))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      )"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    )"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  )"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 91
(
 #"; given an element and a (possibly nested) list, place the element i"
 #"n front of the leftmost"
) 0 0 26 29 1 #"\n"
0 0 18 3 99
(
 #"; element non-list atom, as deep in the sublist as needed.  If the l"
 #"eftmost atom is the empty list,"
) 0 0 26 29 1 #"\n"
0 0 18 3 41 #"; place the element inside the empty list"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 8 #"deepcons"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"elm"
0 0 26 3 1 #" "
0 0 14 3 3 #"lis"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 3 #"lis"
0 0 26 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 14 3 3 #"elm"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 26 3 4 #"()))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 5 #"list?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"lis"
0 0 26 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 8 #"deepcons"
0 0 26 3 1 #" "
0 0 14 3 3 #"elm"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"lis"
0 0 26 3 4 #")) ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 3 #"lis"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 14 3 3 #"elm"
0 0 26 3 1 #" "
0 0 14 3 3 #"lis"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      )"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    )"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  )"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 57 #"; given a list, return the number of pairs of parentheses"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 9 #"numparens"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"lis"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 3 #"lis"
0 0 26 3 2 #") "
0 0 23 3 1 #"1"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 5 #"list?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"lis"
0 0 26 3 4 #")) ("
0 0 14 3 1 #"+"
0 0 26 3 2 #" ("
0 0 14 3 9 #"numparens"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"lis"
0 0 26 3 4 #")) ("
0 0 14 3 9 #"numparens"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 3 #"lis"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 9 #"numparens"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 3 #"lis"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      )"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    )"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  )"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 62
#"; given a list, duplicate all contents, including any sublists"
0 0 26 29 1 #"\n"
0 0 18 3 38 #";TODO: what about just the empty list?"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 4 #"dup*"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"lis"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 3 #"lis"
0 0 26 3 2 #") "
0 0 23 3 1 #"'"
0 0 26 3 3 #"())"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 5 #"list?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"lis"
0 0 26 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 4 #"dup*"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"lis"
0 0 26 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 4 #"dup*"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"lis"
0 0 26 3 4 #")) ("
0 0 14 3 4 #"dup*"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 3 #"lis"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"lis"
0 0 26 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"lis"
0 0 26 3 3 #") ("
0 0 14 3 4 #"dup*"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 3 #"lis"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      )"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    )"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  )"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 97
(
 #"; given a (possibly nested) list, remove any atom that is the repeat"
 #" of the atom that immediately"
) 0 0 26 29 1 #"\n"
0 0 18 3 11 #"; precedes "
0 0 18 3 2 #"it"
0 0 18 3 1 #" "
0 0 18 3 2 #"in"
0 0 18 3 1 #" "
0 0 18 3 3 #"the"
0 0 18 3 1 #" "
0 0 18 3 4 #"same"
0 0 18 3 8 #" sublist"
0 0 26 29 1 #"\n"
0 0 18 3 2 #";("
0 0 18 3 6 #"define"
0 0 18 3 12 #" removedups*"
0 0 26 29 1 #"\n"
0 0 18 3 4 #";  )"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 69
(
 #"; given a (possibly nested) list, return a list containing two lists"
 #":"
) 0 0 26 29 1 #"\n"
0 0 18 3 11 #"; the first"
0 0 18 3 1 #" "
0 0 18 3 56 #"list contains the odd-indexed elements (starting from 1)"
0 0 26 29 1 #"\n"
0 0 18 3 70
(
 #"; the second list contains the even-indexed elements (starting from "
 #"1)"
) 0 0 26 29 1 #"\n"
0 0 18 3 9 #"; However"
0 0 18 3 2 #", "
0 0 18 3 2 #"if"
0 0 18 3 1 #" "
0 0 18 3 3 #"any"
0 0 18 3 1 #" "
0 0 18 3 2 #"of"
0 0 18 3 1 #" "
0 0 18 3 5 #"these"
0 0 18 3 1 #" "
0 0 18 3 8 #"elements"
0 0 18 3 1 #" "
0 0 18 3 3 #"are"
0 0 18 3 1 #" "
0 0 18 3 4 #"also"
0 0 18 3 1 #" "
0 0 18 3 5 #"lists"
0 0 18 3 1 #","
0 0 18 3 1 #" "
0 0 18 3 5 #"these"
0 0 18 3 1 #" "
0 0 18 3 8 #"elements"
0 0 18 3 1 #" "
0 0 18 3 6 #"should"
0 0 18 3 1 #" "
0 0 18 3 2 #"be"
0 0 18 3 1 #" "
0 0 18 3 5 #"split"
0 0 18 3 1 #" "
0 0 18 3 2 #"as"
0 0 18 3 5 #" well"
0 0 26 29 1 #"\n"
0 0 18 3 2 #";("
0 0 18 3 6 #"define"
0 0 18 3 7 #" split*"
0 0 26 29 1 #"\n"
0 0 18 3 4 #";  )"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 99
(
 #"; given a (possibly nested) list, remove any element that, once repe"
 #"ated elements have been removed"
) 0 0 26 29 1 #"\n"
0 0 18 3 91
(
 #"; from it, is the repeat of any element (also once elements have bee"
 #"n removed from it) that"
) 0 0 26 29 1 #"\n"
0 0 18 3 13 #"; immediately"
0 0 18 3 1 #" "
0 0 18 3 8 #"precedes"
0 0 18 3 1 #" "
0 0 18 3 2 #"it"
0 0 18 3 1 #" "
0 0 18 3 2 #"in"
0 0 18 3 1 #" "
0 0 18 3 3 #"the"
0 0 18 3 1 #" "
0 0 18 3 4 #"same"
0 0 18 3 8 #" sublist"
0 0 26 29 1 #"\n"
0 0 18 3 2 #";("
0 0 18 3 6 #"define"
0 0 18 3 13 #" removedups**"
0 0 26 29 1 #"\n"
0 0 18 3 4 #";  )"
0           0
